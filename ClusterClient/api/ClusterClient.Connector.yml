### YamlMime:ManagedReference
items:
- uid: ClusterClient.Connector
  commentId: T:ClusterClient.Connector
  id: Connector
  parent: ClusterClient
  children:
  - ClusterClient.Connector.#ctor(System.String,System.String,System.Int32)
  - ClusterClient.Connector.AnswerQuestion(System.String,ClusterClient.Models.UserAnswer)
  - ClusterClient.Connector.AnswerQuestion(System.String,System.Int32,System.String)
  - ClusterClient.Connector.AnswerQuestions(System.String,System.Collections.Generic.ICollection{ClusterClient.Models.UserAnswer})
  - ClusterClient.Connector.BlockProactiveMessagingForUser(System.String)
  - ClusterClient.Connector.CloseWebSocketConnection
  - ClusterClient.Connector.EnableWebSocketStateCheck(System.Boolean)
  - ClusterClient.Connector.EndPointAddress
  - ClusterClient.Connector.GetNewAnswersForUser(System.String)
  - ClusterClient.Connector.GetNewResponses
  - ClusterClient.Connector.HasAnswerToQuestionOfUser(System.Int32,System.String)
  - ClusterClient.Connector.MissedProactiveMessagesForUser(System.String)
  - ClusterClient.Connector.ProactiveMessagingBlockedForUser(System.String)
  - ClusterClient.Connector.RequestAndRetrieveUnansweredQuestions(System.String,System.Double)
  - ClusterClient.Connector.ResetConnection
  - ClusterClient.Connector.SendFeedbackOnAnswer(System.String,System.Int32,System.Int32,System.Int32)
  - ClusterClient.Connector.SendQuestionAndWaitForAnswer(System.String,System.String,System.Double)
  - ClusterClient.Connector.StoreMessageFromServerAsync(System.String)
  - ClusterClient.Connector.SurpressConnectionErrors
  - ClusterClient.Connector.UnblockProactiveMessagingForUser(System.String)
  langs:
  - csharp
  - vb
  name: Connector
  nameWithType: Connector
  fullName: ClusterClient.Connector
  type: Class
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: Connector
    path: Connector.cs
    startLine: 20
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nThe class <code>Connector</code> allows communication with the Cluster API server by retrieving and sending questions and answers.\n"
  example: []
  syntax:
    content: public class Connector
    content.vb: Public Class Connector
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: ClusterClient.Connector.#ctor(System.String,System.String,System.Int32)
  commentId: M:ClusterClient.Connector.#ctor(System.String,System.String,System.Int32)
  id: '#ctor(System.String,System.String,System.Int32)'
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: Connector(String, String, Int32)
  nameWithType: Connector.Connector(String, String, Int32)
  fullName: ClusterClient.Connector.Connector(System.String, System.String, System.Int32)
  type: Constructor
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: .ctor
    path: Connector.cs
    startLine: 33
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nInitializes a new connector instance with the given websocket host URI used for its websocket connection and the given timeout set as the timeout\nbefore giving up on trying to connect to the server.\n"
  example: []
  syntax:
    content: public Connector(string authorization, string webSocketHostURI = "wss://clusterapi20200320113808.azurewebsites.net/api/Chatbot/WS", int webSocketConnectionTimeout = 10)
    parameters:
    - id: authorization
      type: System.String
      description: The value to be set for the Authorization header in the initial web socket connection request.
    - id: webSocketHostURI
      type: System.String
      description: The URI referencing the server address to which a websocket connection should be made.
    - id: webSocketConnectionTimeout
      type: System.Int32
      description: The timeout to be set in seconds for the websocket connection before giving up. By default set to 10 seconds.
    content.vb: Public Sub New(authorization As String, webSocketHostURI As String = "wss://clusterapi20200320113808.azurewebsites.net/api/Chatbot/WS", webSocketConnectionTimeout As Integer = 10)
  overload: ClusterClient.Connector.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ClusterClient.Connector.ResetConnection
  commentId: M:ClusterClient.Connector.ResetConnection
  id: ResetConnection
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: ResetConnection()
  nameWithType: Connector.ResetConnection()
  fullName: ClusterClient.Connector.ResetConnection()
  type: Method
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: ResetConnection
    path: Connector.cs
    startLine: 114
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nResets the websocket thread by stopping the current thread and starting a new one.\n<table><tbody><tr><td>Post</td><td>If a websocket thread was running, it is stopped and replaced by a new websocket thread running a new connection.\n        If no websocket thread was running, a new one is initialized running a connection.</td></tr></tbody></table>\n"
  example: []
  syntax:
    content: public void ResetConnection()
    content.vb: Public Sub ResetConnection
  overload: ClusterClient.Connector.ResetConnection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ClusterClient.Connector.CloseWebSocketConnection
  commentId: M:ClusterClient.Connector.CloseWebSocketConnection
  id: CloseWebSocketConnection
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: CloseWebSocketConnection()
  nameWithType: Connector.CloseWebSocketConnection()
  fullName: ClusterClient.Connector.CloseWebSocketConnection()
  type: Method
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: CloseWebSocketConnection
    path: Connector.cs
    startLine: 179
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nSends a stop signal to the thread running the websocket connection of this connector to close the connection and stop the thread.\n"
  example: []
  syntax:
    content: public void CloseWebSocketConnection()
    content.vb: Public Sub CloseWebSocketConnection
  overload: ClusterClient.Connector.CloseWebSocketConnection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ClusterClient.Connector.EnableWebSocketStateCheck(System.Boolean)
  commentId: M:ClusterClient.Connector.EnableWebSocketStateCheck(System.Boolean)
  id: EnableWebSocketStateCheck(System.Boolean)
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: EnableWebSocketStateCheck(Boolean)
  nameWithType: Connector.EnableWebSocketStateCheck(Boolean)
  fullName: ClusterClient.Connector.EnableWebSocketStateCheck(System.Boolean)
  type: Method
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: EnableWebSocketStateCheck
    path: Connector.cs
    startLine: 189
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nEnables a constant check of the websocket state on the debugging output stream.\nNot that this is a very CPU consuming option.\n"
  example: []
  syntax:
    content: public void EnableWebSocketStateCheck(bool flag)
    parameters:
    - id: flag
      type: System.Boolean
      description: ''
    content.vb: Public Sub EnableWebSocketStateCheck(flag As Boolean)
  overload: ClusterClient.Connector.EnableWebSocketStateCheck*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ClusterClient.Connector.SurpressConnectionErrors
  commentId: M:ClusterClient.Connector.SurpressConnectionErrors
  id: SurpressConnectionErrors
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: SurpressConnectionErrors()
  nameWithType: Connector.SurpressConnectionErrors()
  fullName: ClusterClient.Connector.SurpressConnectionErrors()
  type: Method
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: SurpressConnectionErrors
    path: Connector.cs
    startLine: 199
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nMakes the public methods of this connector surpress connection related errors.\n"
  example: []
  syntax:
    content: public void SurpressConnectionErrors()
    content.vb: Public Sub SurpressConnectionErrors
  overload: ClusterClient.Connector.SurpressConnectionErrors*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ClusterClient.Connector.EndPointAddress
  commentId: P:ClusterClient.Connector.EndPointAddress
  id: EndPointAddress
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: EndPointAddress
  nameWithType: Connector.EndPointAddress
  fullName: ClusterClient.Connector.EndPointAddress
  type: Property
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: EndPointAddress
    path: Connector.cs
    startLine: 218
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nThe end point uri to which proactive messages should be sent.\n"
  example: []
  syntax:
    content: public string EndPointAddress { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property EndPointAddress As String
  overload: ClusterClient.Connector.EndPointAddress*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: ClusterClient.Connector.BlockProactiveMessagingForUser(System.String)
  commentId: M:ClusterClient.Connector.BlockProactiveMessagingForUser(System.String)
  id: BlockProactiveMessagingForUser(System.String)
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: BlockProactiveMessagingForUser(String)
  nameWithType: Connector.BlockProactiveMessagingForUser(String)
  fullName: ClusterClient.Connector.BlockProactiveMessagingForUser(System.String)
  type: Method
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: BlockProactiveMessagingForUser
    path: Connector.cs
    startLine: 229
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nDisables proactive messaging for a user.\n"
  example: []
  syntax:
    content: public void BlockProactiveMessagingForUser(string userID)
    parameters:
    - id: userID
      type: System.String
      description: The user id of the user for whom proactive messaging should be disabled.
    content.vb: Public Sub BlockProactiveMessagingForUser(userID As String)
  overload: ClusterClient.Connector.BlockProactiveMessagingForUser*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ClusterClient.Connector.UnblockProactiveMessagingForUser(System.String)
  commentId: M:ClusterClient.Connector.UnblockProactiveMessagingForUser(System.String)
  id: UnblockProactiveMessagingForUser(System.String)
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: UnblockProactiveMessagingForUser(String)
  nameWithType: Connector.UnblockProactiveMessagingForUser(String)
  fullName: ClusterClient.Connector.UnblockProactiveMessagingForUser(System.String)
  type: Method
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: UnblockProactiveMessagingForUser
    path: Connector.cs
    startLine: 239
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nEnables proactive messaging for a user.\nProactive messaging is enabled by default if the <code>EndPointAddress</code> of this connector is set.\n"
  example: []
  syntax:
    content: public void UnblockProactiveMessagingForUser(string userID)
    parameters:
    - id: userID
      type: System.String
      description: The user id of the user for whom proactive messaging should be enabled.
    content.vb: Public Sub UnblockProactiveMessagingForUser(userID As String)
  overload: ClusterClient.Connector.UnblockProactiveMessagingForUser*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ClusterClient.Connector.ProactiveMessagingBlockedForUser(System.String)
  commentId: M:ClusterClient.Connector.ProactiveMessagingBlockedForUser(System.String)
  id: ProactiveMessagingBlockedForUser(System.String)
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: ProactiveMessagingBlockedForUser(String)
  nameWithType: Connector.ProactiveMessagingBlockedForUser(String)
  fullName: ClusterClient.Connector.ProactiveMessagingBlockedForUser(System.String)
  type: Method
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: ProactiveMessagingBlockedForUser
    path: Connector.cs
    startLine: 249
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nChecks whether proactive messaging is currently enabled for a user.\n"
  example: []
  syntax:
    content: public bool ProactiveMessagingBlockedForUser(string userID)
    parameters:
    - id: userID
      type: System.String
      description: The user id of the user for whom the proactive messaging blocking state should be checked.
    return:
      type: System.Boolean
      description: True if and only if proactive messaging is blocked for the given user or if the <code>EndPointAddress</code> of this null.
    content.vb: Public Function ProactiveMessagingBlockedForUser(userID As String) As Boolean
  overload: ClusterClient.Connector.ProactiveMessagingBlockedForUser*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ClusterClient.Connector.MissedProactiveMessagesForUser(System.String)
  commentId: M:ClusterClient.Connector.MissedProactiveMessagesForUser(System.String)
  id: MissedProactiveMessagesForUser(System.String)
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: MissedProactiveMessagesForUser(String)
  nameWithType: Connector.MissedProactiveMessagesForUser(String)
  fullName: ClusterClient.Connector.MissedProactiveMessagesForUser(System.String)
  type: Method
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: MissedProactiveMessagesForUser
    path: Connector.cs
    startLine: 295
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nChecks whether proactive messages couldn&apos;t be sent to a user because they were blocked.\n"
  example: []
  syntax:
    content: public bool MissedProactiveMessagesForUser(string userID)
    parameters:
    - id: userID
      type: System.String
      description: The user id of the user for whom should be checked whether proactive messages have been missed.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function MissedProactiveMessagesForUser(userID As String) As Boolean
  overload: ClusterClient.Connector.MissedProactiveMessagesForUser*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ClusterClient.Connector.StoreMessageFromServerAsync(System.String)
  commentId: M:ClusterClient.Connector.StoreMessageFromServerAsync(System.String)
  id: StoreMessageFromServerAsync(System.String)
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: StoreMessageFromServerAsync(String)
  nameWithType: Connector.StoreMessageFromServerAsync(String)
  fullName: ClusterClient.Connector.StoreMessageFromServerAsync(System.String)
  type: Method
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: StoreMessageFromServerAsync
    path: Connector.cs
    startLine: 343
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nParses and stores a message received from the server, so it can be retrieved by another method later on.\n"
  example: []
  syntax:
    content: protected Task StoreMessageFromServerAsync(string serverMessage)
    parameters:
    - id: serverMessage
      type: System.String
      description: A message from the server that should be stored.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Function StoreMessageFromServerAsync(serverMessage As String) As Task
  overload: ClusterClient.Connector.StoreMessageFromServerAsync*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: ClusterClient.Connector.SendQuestionAndWaitForAnswer(System.String,System.String,System.Double)
  commentId: M:ClusterClient.Connector.SendQuestionAndWaitForAnswer(System.String,System.String,System.Double)
  id: SendQuestionAndWaitForAnswer(System.String,System.String,System.Double)
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: SendQuestionAndWaitForAnswer(String, String, Double)
  nameWithType: Connector.SendQuestionAndWaitForAnswer(String, String, Double)
  fullName: ClusterClient.Connector.SendQuestionAndWaitForAnswer(System.String, System.String, System.Double)
  type: Method
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: SendQuestionAndWaitForAnswer
    path: Connector.cs
    startLine: 501
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nSends a given question from a given user to the server and returns the answer from the server.\n"
  example: []
  syntax:
    content: public ServerAnswer SendQuestionAndWaitForAnswer(string userID, string question, double timeout = 5)
    parameters:
    - id: userID
      type: System.String
      description: The ID of the user for whom an answer is required.
    - id: question
      type: System.String
      description: The question to which an answer is required.
    - id: timeout
      type: System.Double
      description: The timeout to be set in seconds before throwing an exception.
    return:
      type: ClusterClient.Models.ServerAnswer
      description: "A server answer object with a question ID assigned to the given question by the server.\nIn case the <code>answer</code> property of the returned server answer is <code>null</code>, then the server the server has assigned a \nquestion ID to the given question, but it hasn&apos;t found an answer yet."
    content.vb: Public Function SendQuestionAndWaitForAnswer(userID As String, question As String, timeout As Double = 5) As ServerAnswer
  overload: ClusterClient.Connector.SendQuestionAndWaitForAnswer*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: The websocket thread has passed an exception. The passed exception is thrown by this method.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ClusterClient.Connector.GetNewResponses
  commentId: M:ClusterClient.Connector.GetNewResponses
  id: GetNewResponses
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: GetNewResponses()
  nameWithType: Connector.GetNewResponses()
  fullName: ClusterClient.Connector.GetNewResponses()
  type: Method
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: GetNewResponses
    path: Connector.cs
    startLine: 556
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nReturns all answers received from the server.\n"
  example: []
  syntax:
    content: public ISet<ServerAnswer> GetNewResponses()
    return:
      type: System.Collections.Generic.ISet{ClusterClient.Models.ServerAnswer}
      description: A set containing all answers received from the serverin response to questions from this client.
    content.vb: Public Function GetNewResponses As ISet(Of ServerAnswer)
  overload: ClusterClient.Connector.GetNewResponses*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ClusterClient.Connector.GetNewAnswersForUser(System.String)
  commentId: M:ClusterClient.Connector.GetNewAnswersForUser(System.String)
  id: GetNewAnswersForUser(System.String)
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: GetNewAnswersForUser(String)
  nameWithType: Connector.GetNewAnswersForUser(String)
  fullName: ClusterClient.Connector.GetNewAnswersForUser(System.String)
  type: Method
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: GetNewAnswersForUser
    path: Connector.cs
    startLine: 571
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nReturns all answers received from the server and addressed to the user identified by the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">userID</code>.\nThis method is not idempotent, which means that calling it twice does not necessarily return the same result twice.\n"
  example: []
  syntax:
    content: public ISet<ServerAnswer> GetNewAnswersForUser(string userID)
    parameters:
    - id: userID
      type: System.String
      description: The user ID of the user who wants to receive answers to previously asked questions.
    return:
      type: System.Collections.Generic.ISet{ClusterClient.Models.ServerAnswer}
      description: A set containing all answers received from the server and addressed to the user identified by the given <code data-dev-comment-type="paramref" class="paramref">userID</code>.
    content.vb: Public Function GetNewAnswersForUser(userID As String) As ISet(Of ServerAnswer)
  overload: ClusterClient.Connector.GetNewAnswersForUser*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ClusterClient.Connector.HasAnswerToQuestionOfUser(System.Int32,System.String)
  commentId: M:ClusterClient.Connector.HasAnswerToQuestionOfUser(System.Int32,System.String)
  id: HasAnswerToQuestionOfUser(System.Int32,System.String)
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: HasAnswerToQuestionOfUser(Int32, String)
  nameWithType: Connector.HasAnswerToQuestionOfUser(Int32, String)
  fullName: ClusterClient.Connector.HasAnswerToQuestionOfUser(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: HasAnswerToQuestionOfUser
    path: Connector.cs
    startLine: 607
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nChecks whether the server has an answer to the question of the given user, identified by its <code data-dev-comment-type=\"paramref\" class=\"paramref\">questionID</code> \nand <code data-dev-comment-type=\"paramref\" class=\"paramref\">userID</code>.\n"
  example: []
  syntax:
    content: public bool HasAnswerToQuestionOfUser(int questionID, string userID)
    parameters:
    - id: questionID
      type: System.Int32
      description: The question ID of the question for which is checked whether an answer is available.
    - id: userID
      type: System.String
      description: The user ID of the user for whom it is checked whether an answer is available.
    return:
      type: System.Boolean
      description: "True if and only if there is a server answer for the user identified with the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">userID</code> \namong the received messages which has the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">questionID</code> as its question ID."
    content.vb: Public Function HasAnswerToQuestionOfUser(questionID As Integer, userID As String) As Boolean
  overload: ClusterClient.Connector.HasAnswerToQuestionOfUser*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ClusterClient.Connector.RequestAndRetrieveUnansweredQuestions(System.String,System.Double)
  commentId: M:ClusterClient.Connector.RequestAndRetrieveUnansweredQuestions(System.String,System.Double)
  id: RequestAndRetrieveUnansweredQuestions(System.String,System.Double)
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: RequestAndRetrieveUnansweredQuestions(String, Double)
  nameWithType: Connector.RequestAndRetrieveUnansweredQuestions(String, Double)
  fullName: ClusterClient.Connector.RequestAndRetrieveUnansweredQuestions(System.String, System.Double)
  type: Method
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: RequestAndRetrieveUnansweredQuestions
    path: Connector.cs
    startLine: 718
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nCreates a request to the server to receive unanswered questions for a user.\nThis method is CPU-bound (use Task.Run to call from a UI thread).\n"
  example: []
  syntax:
    content: public ISet<ServerQuestion> RequestAndRetrieveUnansweredQuestions(string userID, double timeout = 5)
    parameters:
    - id: userID
      type: System.String
      description: The user ID of the user who should answer the questions.
    - id: timeout
      type: System.Double
    return:
      type: System.Collections.Generic.ISet{ClusterClient.Models.ServerQuestion}
      description: A set of server questions. If the set is empty, no questions are available.
    content.vb: Public Function RequestAndRetrieveUnansweredQuestions(userID As String, timeout As Double = 5) As ISet(Of ServerQuestion)
  overload: ClusterClient.Connector.RequestAndRetrieveUnansweredQuestions*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: The websocket thread has passed an exception. The passed exception is thrown by this method.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ClusterClient.Connector.AnswerQuestion(System.String,System.Int32,System.String)
  commentId: M:ClusterClient.Connector.AnswerQuestion(System.String,System.Int32,System.String)
  id: AnswerQuestion(System.String,System.Int32,System.String)
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: AnswerQuestion(String, Int32, String)
  nameWithType: Connector.AnswerQuestion(String, Int32, String)
  fullName: ClusterClient.Connector.AnswerQuestion(System.String, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: AnswerQuestion
    path: Connector.cs
    startLine: 860
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nSends an <code data-dev-comment-type=\"paramref\" class=\"paramref\">answer</code> provided by a user identified by the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">userID</code> to a question identified by\nthe given <code data-dev-comment-type=\"paramref\" class=\"paramref\">questionID</code>.\n"
  example: []
  syntax:
    content: public void AnswerQuestion(string userID, int questionID, string answer)
    parameters:
    - id: userID
      type: System.String
      description: The user ID identifying the user who submitted the answer.
    - id: questionID
      type: System.Int32
      description: The question ID identifying the question for which an <code data-dev-comment-type="paramref" class="paramref">answer</code> is given.
    - id: answer
      type: System.String
      description: An answer to the question identified by the given <code data-dev-comment-type="paramref" class="paramref">questionID</code>.
    content.vb: Public Sub AnswerQuestion(userID As String, questionID As Integer, answer As String)
  overload: ClusterClient.Connector.AnswerQuestion*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: An exception has been passed by the web socket thread.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ClusterClient.Connector.AnswerQuestion(System.String,ClusterClient.Models.UserAnswer)
  commentId: M:ClusterClient.Connector.AnswerQuestion(System.String,ClusterClient.Models.UserAnswer)
  id: AnswerQuestion(System.String,ClusterClient.Models.UserAnswer)
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: AnswerQuestion(String, UserAnswer)
  nameWithType: Connector.AnswerQuestion(String, UserAnswer)
  fullName: ClusterClient.Connector.AnswerQuestion(System.String, ClusterClient.Models.UserAnswer)
  type: Method
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: AnswerQuestion
    path: Connector.cs
    startLine: 876
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nSends an <code data-dev-comment-type=\"paramref\" class=\"paramref\">answer</code> provided by a user identified by the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">userID</code>.\n"
  example: []
  syntax:
    content: public void AnswerQuestion(string userID, UserAnswer answer)
    parameters:
    - id: userID
      type: System.String
      description: The user ID identifying the user who submitted the answer.
    - id: answer
      type: ClusterClient.Models.UserAnswer
      description: The answer to be sent.
    content.vb: Public Sub AnswerQuestion(userID As String, answer As UserAnswer)
  overload: ClusterClient.Connector.AnswerQuestion*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: An exception has been passed by the web socket thread.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: ClusterClient.Connector.AnswerQuestions(System.String,System.Collections.Generic.ICollection{ClusterClient.Models.UserAnswer})
  commentId: M:ClusterClient.Connector.AnswerQuestions(System.String,System.Collections.Generic.ICollection{ClusterClient.Models.UserAnswer})
  id: AnswerQuestions(System.String,System.Collections.Generic.ICollection{ClusterClient.Models.UserAnswer})
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: AnswerQuestions(String, ICollection<UserAnswer>)
  nameWithType: Connector.AnswerQuestions(String, ICollection<UserAnswer>)
  fullName: ClusterClient.Connector.AnswerQuestions(System.String, System.Collections.Generic.ICollection<ClusterClient.Models.UserAnswer>)
  type: Method
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: AnswerQuestions
    path: Connector.cs
    startLine: 899
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nProcesses a series of questionID-answer pairs from a user identified by the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">userID</code>.\n"
  example: []
  syntax:
    content: public void AnswerQuestions(string userID, ICollection<UserAnswer> userAnswers)
    parameters:
    - id: userID
      type: System.String
      description: The user id of the user who wants to send answers to questions.
    - id: userAnswers
      type: System.Collections.Generic.ICollection{ClusterClient.Models.UserAnswer}
    content.vb: Public Sub AnswerQuestions(userID As String, userAnswers As ICollection(Of UserAnswer))
  overload: ClusterClient.Connector.AnswerQuestions*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: An exception has been passed by the web socket thread.
  nameWithType.vb: Connector.AnswerQuestions(String, ICollection(Of UserAnswer))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: ClusterClient.Connector.AnswerQuestions(System.String, System.Collections.Generic.ICollection(Of ClusterClient.Models.UserAnswer))
  name.vb: AnswerQuestions(String, ICollection(Of UserAnswer))
- uid: ClusterClient.Connector.SendFeedbackOnAnswer(System.String,System.Int32,System.Int32,System.Int32)
  commentId: M:ClusterClient.Connector.SendFeedbackOnAnswer(System.String,System.Int32,System.Int32,System.Int32)
  id: SendFeedbackOnAnswer(System.String,System.Int32,System.Int32,System.Int32)
  parent: ClusterClient.Connector
  langs:
  - csharp
  - vb
  name: SendFeedbackOnAnswer(String, Int32, Int32, Int32)
  nameWithType: Connector.SendFeedbackOnAnswer(String, Int32, Int32, Int32)
  fullName: ClusterClient.Connector.SendFeedbackOnAnswer(System.String, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: ClusterClient/Connector.cs
      branch: cluster-client-c#
      repo: https://github.com/heckej/P-O-Entrepreneurship-Team-A-ClusterConnector
    id: SendFeedbackOnAnswer
    path: Connector.cs
    startLine: 924
  assemblies:
  - ClusterClient
  namespace: ClusterClient
  summary: "\nProcesses a feedback response from a user identified by the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">userID</code> concerning \nthe question-answer pair identified by <code data-dev-comment-type=\"paramref\" class=\"paramref\">questionID</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">answerID</code>.\n"
  example: []
  syntax:
    content: public void SendFeedbackOnAnswer(string userID, int answerID, int questionID, int feedback)
    parameters:
    - id: userID
      type: System.String
      description: The user id of the user who wants to send feedback.
    - id: answerID
      type: System.Int32
      description: The answer ID related to the question-answer pair for which feedback is sent.
    - id: questionID
      type: System.Int32
      description: The question ID related to the question-answer pair for which feedback is sent.
    - id: feedback
      type: System.Int32
      description: "A feedback code related to the feedback. This could be as simple as &apos;good&apos; = 1 and &apos;bad&apos; = 0, \nor more advanced using feelings like &apos;happy&apos; = 0, &apos;angry&apos; = 1, &apos;sad&apos; = 2 ...  as long as the server understands it well."
    content.vb: Public Sub SendFeedbackOnAnswer(userID As String, answerID As Integer, questionID As Integer, feedback As Integer)
  overload: ClusterClient.Connector.SendFeedbackOnAnswer*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: An exception has been passed by the web socket thread.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: ClusterClient
  commentId: N:ClusterClient
  name: ClusterClient
  nameWithType: ClusterClient
  fullName: ClusterClient
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: ClusterClient.Connector.#ctor*
  commentId: Overload:ClusterClient.Connector.#ctor
  name: Connector
  nameWithType: Connector.Connector
  fullName: ClusterClient.Connector.Connector
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: ClusterClient.Connector.ResetConnection*
  commentId: Overload:ClusterClient.Connector.ResetConnection
  name: ResetConnection
  nameWithType: Connector.ResetConnection
  fullName: ClusterClient.Connector.ResetConnection
- uid: ClusterClient.Connector.CloseWebSocketConnection*
  commentId: Overload:ClusterClient.Connector.CloseWebSocketConnection
  name: CloseWebSocketConnection
  nameWithType: Connector.CloseWebSocketConnection
  fullName: ClusterClient.Connector.CloseWebSocketConnection
- uid: ClusterClient.Connector.EnableWebSocketStateCheck*
  commentId: Overload:ClusterClient.Connector.EnableWebSocketStateCheck
  name: EnableWebSocketStateCheck
  nameWithType: Connector.EnableWebSocketStateCheck
  fullName: ClusterClient.Connector.EnableWebSocketStateCheck
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: ClusterClient.Connector.SurpressConnectionErrors*
  commentId: Overload:ClusterClient.Connector.SurpressConnectionErrors
  name: SurpressConnectionErrors
  nameWithType: Connector.SurpressConnectionErrors
  fullName: ClusterClient.Connector.SurpressConnectionErrors
- uid: ClusterClient.Connector.EndPointAddress*
  commentId: Overload:ClusterClient.Connector.EndPointAddress
  name: EndPointAddress
  nameWithType: Connector.EndPointAddress
  fullName: ClusterClient.Connector.EndPointAddress
- uid: ClusterClient.Connector.BlockProactiveMessagingForUser*
  commentId: Overload:ClusterClient.Connector.BlockProactiveMessagingForUser
  name: BlockProactiveMessagingForUser
  nameWithType: Connector.BlockProactiveMessagingForUser
  fullName: ClusterClient.Connector.BlockProactiveMessagingForUser
- uid: ClusterClient.Connector.UnblockProactiveMessagingForUser*
  commentId: Overload:ClusterClient.Connector.UnblockProactiveMessagingForUser
  name: UnblockProactiveMessagingForUser
  nameWithType: Connector.UnblockProactiveMessagingForUser
  fullName: ClusterClient.Connector.UnblockProactiveMessagingForUser
- uid: ClusterClient.Connector.ProactiveMessagingBlockedForUser*
  commentId: Overload:ClusterClient.Connector.ProactiveMessagingBlockedForUser
  name: ProactiveMessagingBlockedForUser
  nameWithType: Connector.ProactiveMessagingBlockedForUser
  fullName: ClusterClient.Connector.ProactiveMessagingBlockedForUser
- uid: ClusterClient.Connector.MissedProactiveMessagesForUser*
  commentId: Overload:ClusterClient.Connector.MissedProactiveMessagesForUser
  name: MissedProactiveMessagesForUser
  nameWithType: Connector.MissedProactiveMessagesForUser
  fullName: ClusterClient.Connector.MissedProactiveMessagesForUser
- uid: ClusterClient.Connector.StoreMessageFromServerAsync*
  commentId: Overload:ClusterClient.Connector.StoreMessageFromServerAsync
  name: StoreMessageFromServerAsync
  nameWithType: Connector.StoreMessageFromServerAsync
  fullName: ClusterClient.Connector.StoreMessageFromServerAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Exception
  commentId: T:System.Exception
  isExternal: true
- uid: ClusterClient.Connector.SendQuestionAndWaitForAnswer*
  commentId: Overload:ClusterClient.Connector.SendQuestionAndWaitForAnswer
  name: SendQuestionAndWaitForAnswer
  nameWithType: Connector.SendQuestionAndWaitForAnswer
  fullName: ClusterClient.Connector.SendQuestionAndWaitForAnswer
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: ClusterClient.Models.ServerAnswer
  commentId: T:ClusterClient.Models.ServerAnswer
  parent: ClusterClient.Models
  name: ServerAnswer
  nameWithType: ServerAnswer
  fullName: ClusterClient.Models.ServerAnswer
- uid: ClusterClient.Models
  commentId: N:ClusterClient.Models
  name: ClusterClient.Models
  nameWithType: ClusterClient.Models
  fullName: ClusterClient.Models
- uid: ClusterClient.Connector.GetNewResponses*
  commentId: Overload:ClusterClient.Connector.GetNewResponses
  name: GetNewResponses
  nameWithType: Connector.GetNewResponses
  fullName: ClusterClient.Connector.GetNewResponses
- uid: System.Collections.Generic.ISet{ClusterClient.Models.ServerAnswer}
  commentId: T:System.Collections.Generic.ISet{ClusterClient.Models.ServerAnswer}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<ServerAnswer>
  nameWithType: ISet<ServerAnswer>
  fullName: System.Collections.Generic.ISet<ClusterClient.Models.ServerAnswer>
  nameWithType.vb: ISet(Of ServerAnswer)
  fullName.vb: System.Collections.Generic.ISet(Of ClusterClient.Models.ServerAnswer)
  name.vb: ISet(Of ServerAnswer)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ClusterClient.Models.ServerAnswer
    name: ServerAnswer
    nameWithType: ServerAnswer
    fullName: ClusterClient.Models.ServerAnswer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ClusterClient.Models.ServerAnswer
    name: ServerAnswer
    nameWithType: ServerAnswer
    fullName: ClusterClient.Models.ServerAnswer
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet`1
  commentId: T:System.Collections.Generic.ISet`1
  isExternal: true
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: ClusterClient.Connector.GetNewAnswersForUser*
  commentId: Overload:ClusterClient.Connector.GetNewAnswersForUser
  name: GetNewAnswersForUser
  nameWithType: Connector.GetNewAnswersForUser
  fullName: ClusterClient.Connector.GetNewAnswersForUser
- uid: ClusterClient.Connector.HasAnswerToQuestionOfUser*
  commentId: Overload:ClusterClient.Connector.HasAnswerToQuestionOfUser
  name: HasAnswerToQuestionOfUser
  nameWithType: Connector.HasAnswerToQuestionOfUser
  fullName: ClusterClient.Connector.HasAnswerToQuestionOfUser
- uid: ClusterClient.Connector.RequestAndRetrieveUnansweredQuestions*
  commentId: Overload:ClusterClient.Connector.RequestAndRetrieveUnansweredQuestions
  name: RequestAndRetrieveUnansweredQuestions
  nameWithType: Connector.RequestAndRetrieveUnansweredQuestions
  fullName: ClusterClient.Connector.RequestAndRetrieveUnansweredQuestions
- uid: System.Collections.Generic.ISet{ClusterClient.Models.ServerQuestion}
  commentId: T:System.Collections.Generic.ISet{ClusterClient.Models.ServerQuestion}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<ServerQuestion>
  nameWithType: ISet<ServerQuestion>
  fullName: System.Collections.Generic.ISet<ClusterClient.Models.ServerQuestion>
  nameWithType.vb: ISet(Of ServerQuestion)
  fullName.vb: System.Collections.Generic.ISet(Of ClusterClient.Models.ServerQuestion)
  name.vb: ISet(Of ServerQuestion)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ClusterClient.Models.ServerQuestion
    name: ServerQuestion
    nameWithType: ServerQuestion
    fullName: ClusterClient.Models.ServerQuestion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ClusterClient.Models.ServerQuestion
    name: ServerQuestion
    nameWithType: ServerQuestion
    fullName: ClusterClient.Models.ServerQuestion
  - name: )
    nameWithType: )
    fullName: )
- uid: ClusterClient.Connector.AnswerQuestion*
  commentId: Overload:ClusterClient.Connector.AnswerQuestion
  name: AnswerQuestion
  nameWithType: Connector.AnswerQuestion
  fullName: ClusterClient.Connector.AnswerQuestion
- uid: ClusterClient.Models.UserAnswer
  commentId: T:ClusterClient.Models.UserAnswer
  parent: ClusterClient.Models
  name: UserAnswer
  nameWithType: UserAnswer
  fullName: ClusterClient.Models.UserAnswer
- uid: ClusterClient.Connector.AnswerQuestions*
  commentId: Overload:ClusterClient.Connector.AnswerQuestions
  name: AnswerQuestions
  nameWithType: Connector.AnswerQuestions
  fullName: ClusterClient.Connector.AnswerQuestions
- uid: System.Collections.Generic.ICollection{ClusterClient.Models.UserAnswer}
  commentId: T:System.Collections.Generic.ICollection{ClusterClient.Models.UserAnswer}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<UserAnswer>
  nameWithType: ICollection<UserAnswer>
  fullName: System.Collections.Generic.ICollection<ClusterClient.Models.UserAnswer>
  nameWithType.vb: ICollection(Of UserAnswer)
  fullName.vb: System.Collections.Generic.ICollection(Of ClusterClient.Models.UserAnswer)
  name.vb: ICollection(Of UserAnswer)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ClusterClient.Models.UserAnswer
    name: UserAnswer
    nameWithType: UserAnswer
    fullName: ClusterClient.Models.UserAnswer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ClusterClient.Models.UserAnswer
    name: UserAnswer
    nameWithType: UserAnswer
    fullName: ClusterClient.Models.UserAnswer
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: ClusterClient.Connector.SendFeedbackOnAnswer*
  commentId: Overload:ClusterClient.Connector.SendFeedbackOnAnswer
  name: SendFeedbackOnAnswer
  nameWithType: Connector.SendFeedbackOnAnswer
  fullName: ClusterClient.Connector.SendFeedbackOnAnswer
